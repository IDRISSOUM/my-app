{"ast":null,"code":"var _jsxFileName = \"/Users/mac/test-react/my-app/src/components/Cities.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cities() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]); // Remarque : le tableau vide de dépendances [] indique\n  // que useEffect ne s’exécutera qu’une fois, un peu comme\n  // componentDidMount()\n\n  useEffect(() => {\n    fetch(\"https://testapi.photodino.de/\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result.items);\n      console.log('Voila le result', setItems);\n    }, // Remarque : il faut gérer les erreurs ici plutôt que dans\n    // un bloc catch() afin que nous n’avalions pas les exceptions\n    // dues à de véritables bugs dans les composants.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []); // console.log('API APPEL', result);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Erreur : \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 14\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 14\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(Cities, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n\n_c = Cities;\nexport default Cities;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cities\");","map":{"version":3,"sources":["/Users/mac/test-react/my-app/src/components/Cities.js"],"names":["useEffect","useState","Cities","error","setError","isLoaded","setIsLoaded","items","setItems","fetch","then","res","json","result","console","log","message","map","item","name"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AACd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC,CAHc,CAKd;AACA;AACA;;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAGGF,IAHH,CAIKG,MAAD,IAAY;AAEVP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACK,MAAM,CAACN,KAAR,CAAR;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BP,QAA/B;AACD,KATL,EAUI;AACA;AACA;AACCL,IAAAA,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAhBL;AAkBD,GAnBQ,EAmBN,EAnBM,CAAT,CAVc,CA+Bd;;AAEA,MAAIA,KAAJ,EAAW;AACT,wBAAO;AAAA,8BAAeA,KAAK,CAACa,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACX,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACE;AAAA,gBACGE,KAAK,CAACU,GAAN,CAAUC,IAAI,iBACb;AAAA,kBACGA,IAAI,CAACC;AADR,SAASD,IAAI,CAACC,IAAd;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AASD;AACF;;GAhDMjB,M;;KAAAA,M;AAkDT,eAAeA,MAAf","sourcesContent":["import {useEffect, useState} from \"react\";\n\nfunction Cities() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n  \n    // Remarque : le tableau vide de dépendances [] indique\n    // que useEffect ne s’exécutera qu’une fois, un peu comme\n    // componentDidMount()\n    \n\n    useEffect(() => {\n      fetch(\"https://testapi.photodino.de/\")\n        .then(res => res.json())\n        \n        .then(\n          (result) => {\n            \n            setIsLoaded(true);\n            setItems(result.items);\n            console.log('Voila le result', setItems)\n          },\n          // Remarque : il faut gérer les erreurs ici plutôt que dans\n          // un bloc catch() afin que nous n’avalions pas les exceptions\n          // dues à de véritables bugs dans les composants.\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n    }, [])\n  \n    // console.log('API APPEL', result);\n\n    if (error) {\n      return <div>Erreur : {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Chargement...</div>;\n    } else {\n      return (\n        <ul>\n          {items.map(item => (\n            <li key={item.name}>\n              {item.name}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n\nexport default Cities;\n"]},"metadata":{},"sourceType":"module"}